"""
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
(двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
складываем с первым элементом первой строки второй матрицы и т.д.
"""

class Matrix:

    def __init__(self, *rows):
        self.matrix = rows

    def __str__(self):
        matrix = ""
        for row in self.matrix:
            matrix += "  ".join(map(str, row)) + "\n"
        return matrix

    def __add__(self, other):
        new_matrix = []
        # Функция zip объединяет в кортежи элементы из последовательностей переданных в качестве аргументов,
        # в данном случае идем по строкам наших матриц, когда одинаковой длины, то сложение логично.
        if ((len(self.matrix) == len(other.matrix)) and (len(self.matrix[0]) == len(other.matrix[0]))):
            for i, j in zip(self.matrix, other.matrix):
                new_row = []
                for el_self, el_other in zip(i, j):
                    new_row.append(el_self + el_other)
                new_matrix.append(new_row)
        else:
            return f"Ошибка! Матрицы должны быть одного размера."
        # Возвращаем объект класса Matrix с новыми параметрами
        return Matrix(*(row for row in new_matrix))


matrix_1 = Matrix([1, 2, 3], [4, 5, 6], [7, 8, 9])
matrix_2 = Matrix([1, 2, 3], [3, 4, 7], [7, 8, 9])
print(matrix_1 + matrix_2)

matrix_3 = Matrix([1, 2, 3], [4, 5, 6], [7, 8, 9])
matrix_4 = Matrix([1, 2, 3], [3, 4, 7])
print(matrix_3 + matrix_4)
